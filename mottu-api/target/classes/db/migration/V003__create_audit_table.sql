-- V003__create_audit_table.sql
-- Criação de tabela de auditoria para controle de alterações

-- Tabela de auditoria
CREATE TABLE Audit_log (
    id_audit INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tabela_nome VARCHAR2(50) NOT NULL,
    operacao VARCHAR2(10) NOT NULL, -- INSERT, UPDATE, DELETE
    registro_id INTEGER NOT NULL,
    usuario_id INTEGER,
    data_operacao TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    dados_anteriores CLOB,
    dados_novos CLOB,
    ip_origem VARCHAR2(45),
    user_agent VARCHAR2(500),
    CONSTRAINT fk_audit_usuario FOREIGN KEY (usuario_id) REFERENCES Usuario_sistema(id_usuario)
);

-- Índices para auditoria
CREATE INDEX idx_audit_tabela ON Audit_log(tabela_nome);
CREATE INDEX idx_audit_operacao ON Audit_log(operacao);
CREATE INDEX idx_audit_data ON Audit_log(data_operacao);
CREATE INDEX idx_audit_usuario ON Audit_log(usuario_id);

-- Sequência para controle de versão
CREATE SEQUENCE seq_versao_sistema START WITH 1 INCREMENT BY 1;

-- Tabela de configuração do sistema
CREATE TABLE Sistema_config (
    chave VARCHAR2(100) PRIMARY KEY,
    valor VARCHAR2(500) NOT NULL,
    descricao VARCHAR2(255),
    data_criacao TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    data_atualizacao TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL
);

-- Inserir configurações iniciais
INSERT INTO Sistema_config (chave, valor, descricao) VALUES 
('VERSAO_SISTEMA', '1.0.0', 'Versão atual do sistema');

INSERT INTO Sistema_config (chave, valor, descricao) VALUES 
('MANUTENCAO_ATIVA', 'false', 'Indica se o sistema está em manutenção');

INSERT INTO Sistema_config (chave, valor, descricao) VALUES 
('BACKUP_AUTOMATICO', 'true', 'Ativa backup automático dos dados');

INSERT INTO Sistema_config (chave, valor, descricao) VALUES 
('DIAS_MANTER_HISTORICO', '90', 'Número de dias para manter histórico de posições');

INSERT INTO Sistema_config (chave, valor, descricao) VALUES 
('DIAS_MANTER_ALERTAS', '30', 'Número de dias para manter alertas antigos');

INSERT INTO Sistema_config (chave, valor, descricao) VALUES 
('LIMITE_BATERIA_BAIXA', '20.0', 'Percentual limite para alerta de bateria baixa');

INSERT INTO Sistema_config (chave, valor, descricao) VALUES 
('TEMPO_INATIVIDADE_SENSOR', '24', 'Horas para considerar sensor inativo');

-- Trigger para atualizar data_atualizacao na tabela Sistema_config
CREATE OR REPLACE TRIGGER trg_sistema_config_update
    BEFORE UPDATE ON Sistema_config
    FOR EACH ROW
BEGIN
    :NEW.data_atualizacao := SYSTIMESTAMP;
END;

-- Views úteis para relatórios
CREATE OR REPLACE VIEW vw_motos_resumo AS
SELECT 
    m.id_moto,
    m.placa,
    m.status,
    md.fabricante,
    md.nome_modelo,
    p.nome_patio,
    p.localizacao_patio,
    s.tipo_sensor,
    s.bateria_percentual,
    s.data_transmissao as ultima_transmissao_sensor,
    m.data_atualizacao
FROM Moto m
LEFT JOIN Modelo md ON m.Modelo_id_modelo = md.id_modelo
LEFT JOIN Patio p ON m.id_patio = p.id_patio
LEFT JOIN Sensor_iot s ON m.id_sensor_iot = s.id_sensor_iot;

CREATE OR REPLACE VIEW vw_alertas_recentes AS
SELECT 
    a.id_alerta,
    a.tipo_alerta,
    a.data_geracao,
    m.placa,
    md.fabricante || ' ' || md.nome_modelo as modelo_completo,
    p.nome_patio
FROM Alerta_evento a
JOIN Moto m ON a.id_moto = m.id_moto
LEFT JOIN Modelo md ON m.Modelo_id_modelo = md.id_modelo  
LEFT JOIN Patio p ON m.id_patio = p.id_patio
WHERE a.data_geracao >= SYSTIMESTAMP - INTERVAL '7' DAY
ORDER BY a.data_geracao DESC;

CREATE OR REPLACE VIEW vw_ocupacao_patios AS
SELECT 
    p.id_patio,
    p.nome_patio,
    p.localizacao_patio,
    p.capacidade_maxima,
    COUNT(m.id_moto) as motos_ocupadas,
    (p.capacidade_maxima - COUNT(m.id_moto)) as espacos_livres,
    ROUND((COUNT(m.id_moto) * 100.0 / p.capacidade_maxima), 2) as taxa_ocupacao_pct
FROM Patio p
LEFT JOIN Moto m ON p.id_patio = m.id_patio
GROUP BY p.id_patio, p.nome_patio, p.localizacao_patio, p.capacidade_maxima;

COMMIT;